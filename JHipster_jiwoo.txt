
1. JHipster 란?
- 매우 빠르고 간단하게, Spring boot와 angular 어플리케이션을 생성할 수 있는 프로젝트
- frontend 영역과 server-side 영역의 프로젝트를 한꺼번에 생성

지원하는 영역
- client side options : Html, css, bootstrap, angular JS, Jquery, bower, gulp, sass등등
- server sidee optioos : Spring boot, Spring securitym, gradle, maven, hibernate, Mysql, postgreSQL, oracle
			 MongoDB, cassandra, gatling, cucumber  등등


Microservice 구성 요소
- Jhipster 레지스트리 : 마이크로 서비스 아키텍처의 필수요소, 다른 모든 구성요소를 서로 연결하고 서로 통신할 수 있게 함

- Microservice 응용프로그램 : 백엔드 코드 들어있고, 실행되면, 도메인에 대한 API를 노출한다., 여러 마이크로서비스 응용프로그램
으로 구성 될 수 있으며 응용프로그램에 몇개의 엔티티와 비즈니스 규칙이 포함된다.

- 게이트웨이 : 모든 프론트 엔드 코드를 가지고 있으며 전체 마이크로 서비스 응용프로그램 그룹에서 생성한 API 를 사용한다.


벡엔드 파일 : src/ main / java 폴더에 존재한다.
프런트 엔드 : src / main /webapp 폴더에 존재하고 대부분 Angular JS 모듈의 대부분을 포함한다.





2. 준비사항
- Java, node.js가 먼저 설치
- git, client, maven or gradle, npm으로 gulp, bower등이 먼저 설치
- 주의사항 : bower를 미리 다운로드를 먼저 받아주어야 한다.

1. java 8 설치 

2. (옵션)maven이나 graddle 설치
    - 따로 설치 안하도 JHipster가 자동으로 maven wrapper 혹은 gradle wrapper를 설치한다. 
    - 이 wrapper가 싫다면 직접 설치하면 된다. 
3. git 설치
4. node.js 설치
5. Install Yeoman: npm install -g yo
6. Install Bower: npm install -g bower
7. Install Gulp: npm install -g gulp
8. Install JHipster: npm install -g generator-jhipster

jhipster 이전 버전 설치 : npm install -g generator-jhipster@1.2.0

9. yo jhipster (jhipster 실행)



---------------------------------------------------------------------------------------

1. 응용프로그램 만들기
	
	mkdir myapplication - 빈디렉토리 생성
	cd myapplication - 해당 디렉토리로 이동
	jhipster - 응용프로그램을 생성
	
	
설치시작 및 응용프로그램 생성( 설치방법은 3가지 존재 (yarn 을 이용한 설치, npm을 이용한 설치, 방랑자설치) - npm을 이용해서 설치한다.

	ㄱ. cmd - npm install -g generator-jhipster  로 입력
	ㄴ. 어떤 서비스를 만들것인지 설정
	ㄷ. 어플리케이션 이름을 설정
	ㄹ. 자바기본 패키지 명 설정
	ㅁ. 권한을 어떤식으로 설정할 수 있는 선택(http session, Oauth2, token 방식중에서 선택
		-> session Login 하는 방식으로 선택
	
	ㅂ. 데이터베이스 설정(SQL : H2, MySQL, MariaDB, PostgreSQL,Oracle, MongDB, Cassandra,MongoDB, Cassandra)
	
	ㅅ. production(운영레벨)에서 DB를 선택 - Maria DB ???

	ㅇ. 개발레벨에서 사용할 DB를 선택 ( 개발 운영환경같은것에서 maria DB가 좋다고 하니 이것을 선택)

	ㅈ. hibernate의 세컨드 캐시를 설정할 부분 (싱글서버모드 ehcache, HazelCast)

	ㅊ. 자바백엔드 빌딩시스템 선택, Maven을 선택
	
	ㅌ. 추가설정, 소셜로그인, 검색엔진, 세션 클러스터링, 웹소켓등을 설정
	
	ㅍ. SaSS 를 이용해서 스타일시트를 생성할 것인지 선택 , 빌드하는 스크립트까지 자동으로 생성
	
	ㅎ. 다국어지원 설정 , 한국어도 지원
	
	끝. 테스팅 프레임워크를 선택




	4. 이제 프로젝트를 자신이 사용하는 IDE (Eclips, STS, Intelij 등) import한다. Maven Project로 import하면 된다.
		-> src/main/resourcr/application.config 에 datasource 부분을 application을 설정한 데이터베이스로설정을 맞춘다.
	 


	5. 해당 폴더의 위치에서 .\mvnw 를 입력하면, 해당 배치파일이 시작된다. 
	
	
* 데이터 베이스가 없는 마이크로 서비스 : 데이터베이스가 없으면 마이크로 서비스 응용프로그램만 만들 수 있다.
  데이터 베이스가 없는 마이크로 서비스는 매우 작고, 레거시 시스템처럼 특정 백엔드에 연결하는데 사용할 수 없습니다.




2. 엔티티 생성

	엔티티에 대해서 필요한 것
	
	데이터베이스 테이블 / JPA 엔티티 / Spring 데이터 JPA저장소 / CRUD 연산을 가진 Spring MVC REST Controller
	라우터, 구성요소서비스 / HTML 보기 /

	
	엔티티간의 관계를 위해서 필요한 것
	데이터베이스 외래키 / 관계를 관리 하기위한 Javascript 코드 


	엔티티 생성 명령어 : jhipster entity [엔티티 명]

	--table-name <table_name> - JHipster는 기본적으로 엔티티 이름을 기반으로 테이블 이름을 생성합니다.이 옵션을 전달하면 다른 테이블 이름을 사용할 수 있습니다.
	--angular-suffix <suffix> - 모든 각도 경로에 사용자 지정 접미사를 지정하려면이 옵션을 사용하여 전달할 수 있습니다.
	--regenerate - 이것은 질문을하지 않고 기존 엔티티를 재생성합니다.
	--skip-server - 서버 측 코드를 건너 뛰고 클라이언트 측 코드 만 생성합니다.
	--skip-client - 이렇게하면 클라이언트 측 코드를 건너 뛰고 서버 측 코드 만 생성합니다.	




	
	jhipster의 필드 유형
	
	String, Integer, Long, Float, Double, BigDecimal, LocalDate, Instant, ZonedDateTime, Instant, Boolean, Enumeration, Blob
	

	엔티티는 선택적으로 DTO를 생성해준다.
	
	
	





-----------------------------------------------------------------------------------------------------------------------




Micro-servcie : REST요청을 처리하는 JHipster 생성 응용프로그램
- 마이크로 서비스는 게이트웨이가 존재한다.
- 게이트웨이는 웹트래픽을 처리하고 각도 응용프로그램을 제공하는 jHipster생성 응용프로그램 입니다.(microservice gateway)
- JHipster 레지스트리는 모든 응용프로그램(microservice application) 을 등록하고 구성을 가져오는 런타임 응용프로그램입니다.


마이크로 서비스 : 프론트 엔드 ( Angular 프론트 엔드는 게이트 웨이에서 생성됨) 가 있고, jhipster 레지스트리와 함께 작동하여 구성,
검색 및 관리 되는 jhipster 응용프로그램 유형


마이크서비스 아키텍처에서 엔티티 생성
- microservices 애플리케이션에서 엔티티를 생성 -> Jhipster UML 또는 JDL Studio를 사용하여 복잡한 엔티티 및 관계를 생성할 수있다
- 마이크로서비스에는 Front-end 가 없으므로 Angular JS코드는 생성되지 않습니다. (게이트웨이에서 front-end 단 생성)

일반적으로 새로운 엔티티 생성하거나 마이크로 서비스의 기존 JHipster 구성을 사용하도록 선택할 수 있다.
마이크로 서비스에서 엔티티를 생성하도록 선택한겨우 로컬 컴퓨터에 이 마이크로 서비스의 경로를 입력해야 하며 JHipster는 게이트웨이에서 프런트 엔드 코드를 생성합니다.


Hazelcast를 사용한 분산캐싱
애플리케이션이 SQL 데이터 베이스를 사용한 경우 JHipster는 마이크로 서비스와 함께 2차 수준의 캐싱솔루션을 제안

	- 마이크로서비스가 있는 Jhipster의 기본캐싱 솔루션은 Hazelcast
	- Echache(모놀리식 응용프로그램을 사용하는 기본 솔루션) 을 선택하거나 캐시를 전혀 사용하지 않을 수도 있습니다.
	- 이 솔루션은 마이크로 서비스의 기본값



로컬캐시를 사용하면 서비스 인스턴스에 동기화된 캐시가 없으므로 잘못된 데이터가 발생합니다.
캐시가 없으면 스케일링의 부담이 데이터베이스에 푸시됩니다. 데이터 베이스 성능이 좋지 않습니다.



생산적인 마이크로서비스

마이크로 서비스 모니터링 - docker-compose.yml파일에 JHipster Console을 추가합니다.
일단 시작되면 http://localhost:5601에서 사용할 수 있고, 응용프로그램의 로그와 메트릭을 수집하기 시작한다.
즉, 게이트웨이 및 마이크로 서비스 응용프로그램의 경우 마이크로 서비스 클러스터를 효과저긍로 모니터 하는데 도움이 되는 추가기능이 제공된다.







---------------------------------------------------------------------------------------------------------------------------------
그 외의 내용정리(IaaS,Paas,SaaS, multi-tenancy, micro-service, SDP 흐름)



SI의 고질적인 문제점 : 
- 프로젝트를 해결하는데 있어서 사람에서 답을 찾으려고 함
	-> 내재화된 회사만의 개발적인 방법론이 필요함



개발의 역사
- 2000년대 Spring이 개발, 지금은 spring으로 개발, Spring이 나오기 전까지 그냥 개발했었음
- 재활용을 하지 못함


CDN(Content Delivery Network) : 미국에 있는 웹을 받으려면 미국의 서버에 직접적으로 접근하는것이
아니라, 미국서버 근처에가서 요청을 하는 네트워크



laas(클라우드 서비스) - 클라우스 서비스 : 보안상취약, 쓴만큼 과금
-> os로부터 상위의 모든 플랫폼이나 어플리케이션을 사용자가 직접올릴 수 있습니다.
- 클라우드 서비스 제공자는 관리를 해주지않고 사용자가 직접올리고 관리를 하기 때문에 제공자의 관리의 부담이 작아집니다.
- 매우 작은수의 OS 만 일반적으로 제공 (window서버와 linux) 만 배고
- 고객은 여전히 os와 어플리케이션을 직접관리 해야한다
- 만약 유료 OS나 유료 DBMS에 라이센스 비용은 고객이 부담해야 한다.
- 가상화, 서버, 스토리지, 네트워크



scale out- vm ware에다 이미지를 만들어놓고, 같은 소스를 넣어서 각자 독립된 개발환경에 소스를 뿌리는것
scale up - 서버 그자체를 증강하는 것에 의해서 처리 능력을 향상시키는 것이다. SMP


여러개의 독립된 컴퓨터가 같은 작업을 할 때에, 독립된 WAS를 설치해서 쓰지만 DBMS를 같이 공유하여 쓰는것
하나의 다른 DBMS가 죽는다고 한다면, 두번째 다른 DBMS가 100%를 물려받지 않음, 또한 두번쨰
DBMS 가 죽는다고 가정해도, 세번째 DBMS 가 두번째 DBMS 만큼 물려받지 못함



Paas(Devops) - 항상 새로운 개선된 환경에 가면, 새로운 환경을 개선 -> 이미 환경들이 다 되어 있도록 하는것
	-> Container(Docker)
	ex) 지우의 DB, IDE / 유표의 DB, IDE 가 있듯이 실제로 DB는 하나인데 DB를 별도록 취급해서 개발하는것
	
	-> 일반적인IT환경에서 해당 업무를 수행하는 사람이 그와 관련된 다른 업무를 수행하는 사람의 업무의 종료
	및 회신을 기다린다던지, 하드웨어 및 소프트웨어 사용차례를 기다린다던지, 같은 문제를 계속적으로
	반복적으로 해서, 계속적인 시간낭비를 하고 있다.

	즉, Paas 는 개발자와 개발사에게 인프라나 OS, 플랫폼 관리에 대한 부담을 거의 경감시키지만, 결국 개발자가 모든 부담을
	없애지는 않습니다.
	Paas어플리케이션 서비스를 위해 대부분의 경우 비즈니스 모델과 비즈니스 로직이 추가되어야 한다.
	- 런타임 , 미들웨어 , 운영체제, 가상화 , 서버, 스토리지, 네트워크		


Saas
- 어플리케이션의 소비 관점에서 제공되는 IT의 서비스방식을 의미, 조직이나 개인이 쉽게 어플리케이션을 사용하고 소비



Sw 재사용 - Framework 재사용

Multi-tenancy : 인터넷에서 여러 사람이 동시에 같은 작업을 하려면 소프트웨어나 서비스를 여러사람이 공유

Enterprise service Bus (ESB) -
ex) 재무팀, 인사팀, 회계팀이 있을 때, 회계정보에 대해 알려면 인사의 정보를 알아야함
따라서 팀의 특정히 다른팀에서 알아야 되는 사항을 모두가 볼수 있도록 노출 시킴
그 노출될 정보에 대한 정보를 미리 주소로 가지고 있는데 그것을 버스에다 실어서 알게됨


Micro-service : 독립적으로 배포가 가능한 서비스들의 묶음으로 소프트웨어 애플리케이션을 설계하는 방법

ex)
sms를 보내고 보내는 정보를 빼고 , 보내는 것만 container에 넣고 재사용도를 높일 수 있다.


monolithic style(덩어리 스타일) vs 마이크로 서비스(Microservice style)
monolithic service은 단일 프로세스에 모든기능을 넣고, 복수의 서버에 덩어리 어플리케이션을 복제함으로 확장
시키는 방법이지만, micro service는 필요에 따라 기능마다 각각 서비스에 넣는다.
그리고 필요에 따라 서버들에 서비스를 복제함으로 확장한다.


- 느슨한결합과 마이크로 서비스 아키텍처 스타일의 과정



BNF - 두개의 엔티티를 만들 떄 절대 중복이 없다. , 정규화 :서로가 독립적이기 위해서


Angular JS : Front-page를 MVC로 만드는것 (디자인 패턴)
디자인 패턴이  여러개 모이면 Frame work 가된다.



SDP 흐름
Moblie에서  APImanagement에 이미등록되어 있던 경로로 정상적인 request를 보내게 되면, API management에서는 connector를 통해서
연결되어 있던, 예를들면 보안, 인증, mms와 같은 기능의 api들이 요청에 따라 Moblie로 response를 주게 되서 mobile로 화면에 뿌려지게 된다.

